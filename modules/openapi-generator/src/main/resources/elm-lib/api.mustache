module OpenAPI.Request.{{classname}} exposing ({{#operations}}{{#operation}}{{^-first}}, {{/-first}}{{operationId}}{{/operation}}{{/operations}}, basePath)

{{>imports}}import Dict
import Http
import Json.Decode
import Url.Builder as Url

{{^enableCustomBasePaths}}basePath : String
basePath =
    "{{basePath}}"
{{/enableCustomBasePaths}}
{{#operations}}
  {{#operation}}

type G{{operationId}}
    = {{#responses}}{{^-first}} | {{/-first}}G{{operationId}}{{^vendorExtensions.default}}{{code}}{{/vendorExtensions.default}}{{#vendorExtensions.default}}Default{{/vendorExtensions.default}}{{#dataType}} {{#isMapContainer}}(Dict.Dict String {{/isMapContainer}}{{#isListContainer}}(List {{/isListContainer}}{{dataType}}{{#isListContainer}}){{/isListContainer}}{{#isMapContainer}}){{/isMapContainer}}{{/dataType}}{{/responses}}

{{#notes}}
{-| {{{notes}}}
-}
{{/notes}}
{{operationId}} :
{{#headerParams}}
{{#-first}}    { {{/-first}}{{^-first}}    , {{/-first}}{{paramName}} : {{^required}}Maybe ({{/required}}{{#isListContainer}}List {{/isListContainer}}{{dataType}}{{^required}}){{/required}}
{{#-last}}    } -> {{/-last}}
{{/headerParams}}
    { {{^responses}}handler : msg{{/responses}}{{#responses}}{{^-first}} 
    , {{/-first}}h{{^vendorExtensions.default}}{{code}}{{/vendorExtensions.default}}{{#vendorExtensions.default}}Default{{/vendorExtensions.default}} : {{#dataType}}{{#isMapContainer}}(Dict.Dict String {{/isMapContainer}}{{#isListContainer}}(List {{/isListContainer}}{{dataType}}{{#isListContainer}}){{/isListContainer}}{{#isMapContainer}}){{/isMapContainer}} -> msg{{/dataType}}{{^dataType}}msg{{/dataType}}{{/responses}}
    , hError : Http.Error -> msg
{{#enableCustomBasePaths}}    , basePath : String{{/enableCustomBasePaths}}
{{#enableHttpRequestTrackers}}    , tracker : Maybe String{{/enableHttpRequestTrackers}}
{{#bodyParam}}    , body : {{^required}}Maybe {{/required}}{{dataType}}{{/bodyParam}}
{{#pathParams}}    , {{paramName}} : {{#isListContainer}}List {{/isListContainer}}{{dataType}}{{/pathParams}}
{{#queryParams}}    , {{paramName}} : {{^required}}Maybe ({{/required}}{{#isListContainer}}List {{/isListContainer}}{{dataType}}{{^required}}){{/required}}{{/queryParams}}
    }
    -> Cmd msg
{{operationId}} {{#headerParams.0}}headers {{/headerParams.0}}params =
    Http.riskyRequest
        { method = "{{httpMethod}}"
        , headers = {{#headerParams.0}}List.filterMap identity {{/headerParams.0}}[{{{vendorExtensions.headers}}}]
        , url = Url.crossOrigin {{#enableCustomBasePaths}}params.{{/enableCustomBasePaths}}basePath
            [{{{path}}}]
            {{#queryParams.0}}(List.filterMap identity {{/queryParams.0}}[{{{vendorExtensions.query}}}]{{#queryParams.0}}){{/queryParams.0}}
        , body = {{#bodyParam}}{{^required}}Maybe.withDefault Http.emptyBody <| Maybe.map ({{/required}}Http.jsonBody {{#required}}<|{{/required}}{{^required}}<<{{/required}} {{vendorExtensions.elmEncoder}}{{^required}}){{/required}} params.body{{/bodyParam}}{{^bodyParam}}Http.emptyBody{{/bodyParam}}
        , expect = {{^responses}}Http.expectWhatever (\r -> case r of Ok _ -> return params.handler; Err e -> params.errorHandler e ){{/responses}}{{#responses.0}}Http.expectStringResponse 
            (\r -> case r of 
                Err e ->
                  params.errorHandler e
                Ok g -> 
                    case g of
                        {{#responses}}
                        G{{operationId}}{{^vendorExtensions.default}}{{code}}{{/vendorExtensions.default}}{{#vendorExtensions.default}}Default{{/vendorExtensions.default}}{{#dataType}} x{{/dataType}} -> params.{{operationId}}{{^vendorExtensions.default}}{{code}}{{/vendorExtensions.default}}{{#vendorExtensions.default}}Default{{/vendorExtensions.default}}{{#dataType}} x{{/dataType}}
                        {{/responses}}
            )
            (\resp -> 
                  let
                     statusHandlers metadata body = 
                        case metadata.statusCode of
                           {{#responses}}
                           {{^vendorExtensions.default}}{{code}} ->
                           {{^dataType}}
                              Ok G{{operationId}}{{code}}
                           {{/dataType}}
                           {{#dataType}}
                               Result.map G{{operationId}}{{code}} <| Result.mapError (Http.BadBody << Json.Decode.errorToString) <| Json.Decode.decodeString {{#isMapContainer}}(Json.Decode.dict {{/isMapContainer}}{{#isListContainer}}(Json.Decode.list {{/isListContainer}}{{#vendorExtensions}}{{elmDecoder}}{{/vendorExtensions}}{{#isListContainer}}){{/isListContainer}}{{#isMapContainer}}){{/isMapContainer}} body{{/dataType}}
                           {{/vendorExtensions.default}}
                           {{/responses}}

                           {{#vendorExtensions.hasDefault}}
                           _ ->
                           {{#responses}}
                           {{#vendorExtensions.default}}
                           {{^dataType}}
                               Ok G{{operationId}}Default
                           {{/dataType}}
                           {{#dataType}}
                               Result.map G{{operationId}}Default <| Result.mapError (Http.BadBody << Json.Decode.errorToString) <| Json.Decode.decodeString {{#isMapContainer}}(Json.Decode.dict {{/isMapContainer}}{{#isListContainer}}(Json.Decode.list {{/isListContainer}}{{#vendorExtensions}}{{elmDecoder}}{{/vendorExtensions}}{{#isListContainer}}){{/isListContainer}}{{#isMapContainer}}){{/isMapContainer}} body{{/dataType}}
                           {{/vendorExtensions.default}}
                           {{/responses}}
                           {{/vendorExtensions.hasDefault}}
                           {{^vendorExtensions.hasDefault}}
                           _ ->
                              Err <| Http.BadStatus metadata.statusCode
                           {{/vendorExtensions.hasDefault}}
                  in
                  case resp of
                     Http.GoodStatus_ metadata body ->
                        statusHandlers metadata body

                     Http.BadStatus_ metadata body ->
                        statusHandlers metadata body

                     Http.BadUrl_ s ->
                        Err <| Http.BadUrl s

                     Http.Timeout_ ->
                        Err <| Http.Timeout

                     Http.NetworkError_ ->
                        Err <| Http.NetworkError
            )
         {{/responses.0}}
        , timeout = Just 30000
        , tracker = {{#enableHttpRequestTrackers}}params.tracker{{/enableHttpRequestTrackers}}{{^enableHttpRequestTrackers}}Nothing{{/enableHttpRequestTrackers}}
        }
  {{/operation}}
{{/operations}}
